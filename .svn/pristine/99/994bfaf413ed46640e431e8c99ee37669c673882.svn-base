import sys
import time

sys.path.append(r"D:\Project_Python\webMDChecker\MDChecker\MailControler")

from model_mail_get import EmailAttachDownloader
from model_excel_export import SummaryExcelData
from model_excel_import import ExcelDataConverter
from model_data import *
from model_data_converter import PensionDataConverter
from model_excel_styler import ExcelFormMaker
from model_mail_styler import MailFormMaker
from model_mail_send import MailSender

# close all opened excel
kill_excel()
# db controller
dc = DataControl()

# dc.delete_old_data('mdc_mails')
# dc.delete_old_data('mdc_mails', "where mail = '2022-07-06 | 김영일 | 테스트데이터'")
# dc.delete_old_data('mdc_raw_md')

# # email check
ed = EmailAttachDownloader(dc)
email_num = ed.check_emails()
# delete old attachment / attached file download / write result in DB
fileNames = ed.download_attachFiles(email_num)

if len(fileNames) == 0:
    logWrite(f'[신규 메일 없음      ] : 신규 메일이 없으므로 프로그램이 종료됩니다. ')

# attachment save to db
for fileName, send_date in fileNames:
    fileName_stem = Path(fileName).stem
    ec = ExcelDataConverter(fileName)
    sheetName, usedRangeData = ec.read_excel_usedRangeData(1)
    df = ec.convert_pension_data_for_DB(sheetName, send_date, usedRangeData)
    dc.drop_duplicates_by_date_from_raw(fileName_stem, send_date)
    dc.insert_data_to_db(df, 'mdc_raw_md')
    dc.update_mail_sheetName(fileName_stem, sheetName)
    logWrite(f'[데이터 저장 - Save ] : {fileName_stem} ')

# Data convert inside db
siteCodes = []
for fileName, send_date in fileNames:
    fileName_stem = Path(fileName).stem
    pc = PensionDataConverter(dc, fileName_stem)
    siteCode, month = pc.pension_data_converter()
    if siteCode is False:
        siteCodes = []
        logWrite(f"등록되지 않은 현장 자료입니다.")
        dc.conn.rollback()
        break
    siteCodes.append([siteCode, month])
    logWrite(f'[데이터 가공 - Save ] : {fileName_stem} ')
    # update_mails_table
    dc.update_mails_add_site_code()

for siteCode, month in siteCodes:
    se = SummaryExcelData(dc, siteCode, month)
    outputFileName = se.name_output_excel_file()
    se.consist_summary_excel_data(outputFileName)
    # os.startfile(outputFileName)


dc.conn.commit()
try:
    time.sleep(1)
    shutil.rmtree(savePath)
    logWrite(f'[첨부파일 - 전체삭제  ] : {savePath}')
except OSError as e:
    logWrite(f'[첨부파일 - 삭제오류  ] : {e.filename}, {e.strerror}')



