from sqlalchemy import create_engine
import psycopg2 as pg2
import pandas as pd
import numpy as np
import psutil

from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

# root directory
rootPath = r'D:\Project_Data\webMDChecker'
logFile = f"{rootPath}\Log\Log_{datetime.now().strftime('%Y-%m-%d')}_MD.log"
savePath = f"{rootPath}\Files_MD\{datetime.now().strftime('%Y-%m-%d')}"   # 첨부파일 저장위치
resultPath = f"{rootPath}\Result_"

# set run time
sRunTime = datetime.now().strftime('%Y-%m-%d_%H%M')
T_Date = datetime.now().strftime('%Y-%m-%d')                         # Today
D1_Day = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')   # D-1 날짜
D2_Day = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')   # D-2 날짜
D3_Day = (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d')   # D-3 날짜
if int(T_Date[8:10]) < 10:
    F_Date = (datetime.now() - timedelta(days=10)).strftime('%Y-%m') + '-01'  # 집계기간 From / 월초(매달 10일 이전)
else:
    F_Date = datetime.now().strftime('%Y-%m') + '-01'  # 집계기간 From / 월중~월말

def logWrite(logStr):
    print(logStr)
    f = open(logFile, 'a', encoding='UTF-8')
    f.write(datetime.now().strftime('%Y-%m-%d %H%M%S') + " : " + logStr + "\n")
    f.close()

def kill_excel():
    for proc in psutil.process_iter():
        if proc.name() == "EXCEL.EXE":
            proc.kill()

class DataControl:
    def __init__(self):
        self.sRunType = 'local'
        # DB 서버 정보 ###########################
        if self.sRunType == 'SERVER':
            self.db_host = '10.171.94.66'
            self.db_name = 'JobReport'
            self.db_user = 'postgres'
            self.db_pwd = 'nam1004'
        else:
            self.db_host = 'localhost'
            self.db_name = 'JobReport'
            self.db_user = 'postgres'
            self.db_pwd = 'nam1004'

        self.connStr = f'postgresql://{self.db_user}:{self.db_pwd}@{self.db_host}:5432/{self.db_name}'

        conn = pg2.connect(
            'host={0} dbname={1} user={2} password={3}'.format(self.db_host, self.db_name, self.db_user,
                                                               self.db_pwd))
        self.conn = conn


    def call_df_from_db_with_column_name(self, db_table_name):
        # get DB data
        curs = self.conn.cursor()
        sSql = f"select * from {db_table_name};"  # order by col_01 desc
        curs.execute(sSql)
        data_all = curs.fetchall()

        # get DB name
        sSql = f"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{db_table_name}' order by ordinal_position;"
        curs.execute(sSql)
        column_names = curs.fetchall()

        # 가져온 컬럼명은 (이름,  ) 이런 형태이므로 첫번째 컬럼만 별도로 리스트
        column_names = [i[0] for i in column_names]
        df = pd.DataFrame(data_all, columns=column_names)

        return df

    def get_column_names(self, db_table_name):
        curs = self.conn.cursor()
        # get DB name
        sSql = f"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{db_table_name}' order by ordinal_position;"
        curs.execute(sSql)
        column_names = curs.fetchall()
        # 가져온 컬럼명은 (이름,  ) 이런 형태이므로 첫번째 컬럼만 별도로 리스트
        column_names = [i[0] for i in column_names]
        return column_names

    def upload_df_to_db_at_once(self, df, db_table_name):
        engine = create_engine(self.connStr)
        df.to_sql(db_table_name, engine, if_exists='append')

    def is_oldmail(self, mailStr):
        curs = self.conn.cursor()
        sSql = f"select count(*) from job_mails where 집계완료메일 = '{mailStr}';"
        curs.execute(sSql)
        nCnt = curs.fetchone()
        return nCnt[0]

    def insert_mail_get_list(self, mailStr, senderTxt, sendDate):
        curs = self.conn.cursor()
        sSql = f"insert into job_mails (집계완료메일, 발송자, 발송일시) values('{mailStr}','{senderTxt}','{sendDate}');"
        curs.execute(sSql)

    def delete_overlaped_attach_list(self, mailStr):
        curs = self.conn.cursor()
        sSql = f"delete from job_attach where 집계완료메일 = '{mailStr}';"
        curs.execute(sSql)

    def insert_attachment_list(self, mailStr, senderTxt, filename, sendDate):
        curs = self.conn.cursor()
        sSql = f"insert into job_attach (집계완료메일,발송자,첨부파일,발송일시) values('{mailStr}','{senderTxt}','{filename}','{sendDate}');"
        curs.execute(sSql)

    def update_attachment_list(self, projectCode, subcontractor, discipline, reportDate, sRunTime,row_File):
        curs = self.conn.cursor()
        sSql = f"update job_attach set 현장코드 = '{projectCode}', 업체 = '{subcontractor} / {discipline}', 날짜 = '{reportDate}', 집계일시 = '{sRunTime}' " \
               f"where 첨부파일 = '{row_File}'"
        curs.execute(sSql)

    def delete_not_attached_list(self):
        curs = self.conn.cursor()
        sSql = f"delete from job_attach where 날짜 is null;"
        curs.execute(sSql)

    def upload_ilbo_df_to_DB(self, df, projectCode, reportDate, subcontractor, discipline, dbTable):
        curs = self.conn.cursor()
        # delete old data
        sSql = f"delete from {dbTable} where reportdate='{reportDate}' and subcontractor='{subcontractor}' and projectcode='{projectCode}' and discipline = '{discipline}';"
        try:
            curs.execute(sSql)
        except Exception as ex:
            print(ex, sSql)
        # upload to DB
        sColumnName = ','.join(df.columns.tolist())
        for index, row in df.iterrows():
            sSql = f"insert into {dbTable}({sColumnName}) values({'%s,' * (len(row) - 1)}%s)"
            try:
                curs.execute(sSql, list(row))
            except Exception as ex:
                print(ex, sSql)
                return
        logWrite(f'[▶ finish         ] : 작업일보 DB 업로드 완료, {projectCode}, {reportDate}, {subcontractor}, {discipline}')
        return

    def upload_actual_quantity_df_to_DB(self, df, dbTable):
        """수정중"""
        curs = self.conn.cursor()
        # delete old data
        sSql = f"delete from {dbTable} where ///////////////////////////////////////"
        try:
            curs.execute(sSql)
        except Exception as ex:
            logWrite(f'[▶ error          ] : 과거 실투입 데이터 삭제 오류, {ex}, {sSql}')
            return
        # upload to DB
        columnNames = ','.join(df.columns.tolist())
        for index, row in df.iterrows():
            sSql = f"insert into {dbTable}({columnNames}) values({'%s,' * (len(row)-1)} %s)"
            try:
                curs.execute(sSql, list(row))
            except Exception as ex:
                logWrite(f'[▶ error          ] : 실투입 데이터 업로드 오류, {ex}, {sSql}')
                return
        return

    def request_table_in_mail_body(self, siteCode):
        if siteCode == "PLNT":
            pQuery_siteCode = "and 현장코드 in (select distinct(projectcode) from job_plnt_data) "
        else:
            pQuery_siteCode = f"and 현장코드 = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select 현장코드, 업체, 발송자, 날짜, 발송일시, 집계일시  " \
               f"from job_attach " \
               f"where 발송일시 >= '{D3_Day}' {pQuery_siteCode} " \
               f"order by cast(집계일시 as date) desc, 현장코드; "
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['현장코드', '업체', '발송자', '날짜', '발송일시', '집계일시']
        df = pd.DataFrame(data, columns=column_names)
        try:
            summary_time = datetime.strptime(D1_Day + ' 05:00:00 +0900', '%Y-%m-%d %H:%M:%S %z')
            df = df[df['발송일시'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S %z') >= summary_time)]
            logWrite(f"{summary_time} 이후에 수신된 메일만 첨부에 넣습니다.")
        except:
            pass
        return df

    def request_local_timezone(self, siteCode):
        curs = self.conn.cursor()
        sSql = f"select 타임존 from job_mst_site where 현장코드 = '{siteCode}'"
        curs.execute(sSql)
        timezone = curs.fetchall()
        return timezone[0][0]


    def request_table_summary_sheet00(self, siteCode=None):
        """
        ['reportdate', 'projectcode', 'discipline', 'subcontractor', 'contractnumber',
        'cwa', 'cwp', 'iwp', 'browngreenfield', 'category', 'tagnostrcturenopipingmaterial',
        'activity', 'level1', 'level2', 'level3', 'amount']
        """
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"where projectcode = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select projectcode, discipline, subcontractor, " \
               f"sum(case when reportdate='{D3_Day}' and level1='Daily Manpower Type' then amount else 0 end) as MD3, " \
               f"sum(case when reportdate='{D2_Day}' and level1='Daily Manpower Type' then amount else 0 end) as MD2, " \
               f"sum(case when reportdate='{D1_Day}' and level1='Daily Manpower Type' then amount else 0 end) as MD1, " \
               f"sum(case when reportdate='{T_Date}' and level1='Daily Manpower Type' then amount else 0 end) as MD0, " \
               f"sum(case when level1='Daily Manpower Type' then amount else 0 end) as MSum, " \
               f"sum(case when reportdate='{D3_Day}' and level1='Equipment Type' then amount else 0 end) as ED3, " \
               f"sum(case when reportdate='{D2_Day}' and level1='Equipment Type' then amount else 0 end) as ED2, " \
               f"sum(case when reportdate='{D1_Day}' and level1='Equipment Type' then amount else 0 end) as ED1, " \
               f"sum(case when reportdate='{T_Date}' and level1='Equipment Type' then amount else 0 end) as ED0, " \
               f"sum(case when level1='Equipment Type' then amount else 0 end) as ESum " \
               f"from job_plnt_data " \
               f"{pQuery_siteCode} " \
               f"group by projectcode, discipline, subcontractor;"
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['projectCode', 'discipline', 'subcontractor', 'MD3','MD2','MD1','MD0','MSum','ED3','ED2','ED1','ED0','ESum']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            'projectCode':str, 'discipline':str, 'subcontractor':str,
            'MD3':int, 'MD2':int, 'MD1':int, 'MD0':int, 'MSum':int,
            'ED3':int, 'ED2':int, 'ED1':int, 'ED0':int, 'ESum':int
        })
        df.replace('NaN', '', inplace=True)
        return df

    def request_table_summary_sheet01(self, siteCode=None):
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"and projectcode = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select projectcode, discipline, subcontractor, level3, " \
               f"sum(case when reportdate = '{D3_Day}' then amount else 0 end) as MD3, " \
               f"sum(case when reportdate = '{D2_Day}' then amount else 0 end) as MD2, " \
               f"sum(case when reportdate = '{D1_Day}' then amount else 0 end) as MD1, " \
               f"sum(case when reportdate = '{T_Date}' then amount else 0 end) as MD0, " \
               f"sum(amount) as MSum " \
               f"from job_plnt_data " \
               f"where level1 like '%Man%' {pQuery_siteCode} " \
               f"group by projectcode, discipline, subcontractor, level3; "
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['projectCode', 'discipline', 'subcontractor', 'ManpowerType', 'MD3','MD2','MD1','MD0','MSum']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            'projectCode':str, 'discipline':str, 'subcontractor':str, 'ManpowerType':str,
            'MD3':int, 'MD2':int, 'MD1':int, 'MD0':int, 'MSum':int
        })
        df.replace('NaN', '', inplace=True)
        return df

    def request_table_summary_sheet02(self, siteCode=None):
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"and projectcode = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select projectcode, discipline, subcontractor, level3, " \
               f"sum(case when reportdate = '{D3_Day}' then amount else 0 end) as ED3, " \
               f"sum(case when reportdate = '{D2_Day}' then amount else 0 end) as ED2, " \
               f"sum(case when reportdate = '{D1_Day}' then amount else 0 end) as ED1, " \
               f"sum(case when reportdate = '{T_Date}' then amount else 0 end) as ED0, " \
               f"sum(amount) as ESum " \
               f"from job_plnt_data " \
               f"where level1 like '%Equipment%' {pQuery_siteCode} " \
               f"group by projectcode, discipline, subcontractor, level3; "
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['projectCode', 'discipline', 'subcontractor', 'EquipmentType', 'ED3','ED2','ED1','ED0','ESum']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            'projectCode':str, 'discipline':str, 'subcontractor':str, 'EquipmentType':str,
            'ED3': int, 'ED2': int, 'ED1': int, 'ED0': int, 'ESum': int
        })
        df.replace('NaN', '', inplace=True)
        return df

    def request_table_summary_sheet03(self, siteCode=None):
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"and projectcode = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select projectcode, discipline, subcontractor, cwa, cwp, iwp, category, activity, level2, level3, reportdate, " \
               f"sum(amount) " \
               f"from job_plnt_data " \
               f"where level1 like '%Man%' and reportdate >= '{F_Date}' and reportdate <= '{T_Date}' {pQuery_siteCode} " \
               f"group by projectcode, discipline, subcontractor, cwa, cwp, iwp, category, activity, level2, level3, reportdate; "
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['projectCode', 'discipline', 'subcontractor', 'CWA', 'CWP', 'IWP', 'Category', 'Activity', 'Direct', 'Type', 'reportdate', 'Amount']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            'projectCode':str, 'discipline':str, 'subcontractor':str,
            'CWA':str, 'CWP':str, 'IWP':str, 'Category':str, 'Activity':str, 'Direct':str, 'Type':str,
            'Amount': int
        })
        df.replace('NaN', '', inplace=True)
        return df

    def request_table_summary_sheet04(self, siteCode=None):
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"and projectcode = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select projectcode, discipline, subcontractor, cwa, cwp, iwp, category, activity, level3, reportdate, " \
               f"sum(amount) " \
               f"from job_plnt_data " \
               f"where level1 like '%Equip%' and reportdate >= '{F_Date}' and reportdate <= '{T_Date}' {pQuery_siteCode} " \
               f"group by projectcode, discipline, subcontractor, cwa, cwp, iwp, category, activity, level3, reportdate; "
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['projectCode', 'discipline', 'subcontractor', 'CWA', 'CWP', 'IWP', 'Category', 'Activity', 'Type', 'reportdate', 'Amount']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            'projectCode':str, 'discipline':str, 'subcontractor':str,
            'CWA':str, 'CWP':str, 'IWP':str, 'Category':str, 'Activity':str, 'Type':str,
            'Amount': int
        })
        df.replace('NaN', '', inplace=True)
        return df

    def request_table_summary_sheet05(self, siteCode=None):
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"and projectcode = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select projectcode, discipline, subcontractor, iwp, tagnostrcturenopipingmaterial, activity, reportdate, " \
               f"sum(amount) " \
               f"from job_plnt_data " \
               f"where level1 like '%Quantity%' and reportdate >= '{F_Date}' and reportdate <= '{T_Date}' {pQuery_siteCode} " \
               f"group by projectcode, discipline, subcontractor, iwp, tagnostrcturenopipingmaterial, activity, reportdate;"
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['projectCode', 'discipline', 'subcontractor', 'IWP','No', 'Activity', 'reportdate', 'Amount']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            'projectCode':str, 'discipline':str, 'subcontractor':str,
            'IWP':str, 'No':str, 'Activity':str,
            'Amount': int
        })
        df.replace('NaN', '', inplace=True)
        return df


    def request_table_summary_sheet06(self, siteCode=None):
        """Raw"""
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"and projectcode = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select reportdate, projectcode, discipline, subcontractor, contractnumber, " \
               f"cwa, cwp, iwp, browngreenfield, category, tagnostrcturenopipingmaterial, " \
               f"activity, level1, level2, level3, " \
               f"sum(amount) " \
               f"from job_plnt_data " \
               f"where reportdate >= '{F_Date}' and reportdate <= '{T_Date}' {pQuery_siteCode} " \
               f"group by reportdate, projectcode, discipline, subcontractor, contractnumber, " \
               f"cwa, cwp, iwp, browngreenfield, category, tagnostrcturenopipingmaterial, " \
               f"activity, level1, level2, level3;"
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['reportdate', 'project', 'discipline', 'subcontractor', 'contractnumber',
                        'cwa', 'cwp', 'iwp', 'browngreenfield', 'category', 'No',
                        'activity', 'level1', 'level2', 'level3', 'Amount']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            'project':str, 'discipline':str, 'subcontractor':str, 'contractnumber':str,
            'cwa':str, 'cwp':str, 'iwp':str, 'browngreenfield':str, 'category':str, 'No':str,
            'activity':str, 'level1':str, 'level2':str, 'level3':str,
            'Amount': int
        })
        df.replace('NaN', '', inplace=True)
        return df

    def request_table_summary_sheet07(self, siteCode=None, f_date=None, t_date=None):
        """
        productivity
        """
        if siteCode == "PLNT":
            pQuery_siteCode = ""
        else:
            pQuery_siteCode = f"and projectcode = '{siteCode}' "
        if f_date is None:
            f_date = F_Date
        if t_date is None:
            t_date = T_Date

        curs = self.conn.cursor()
        sSql = f"with T as (" \
               f"select " \
               f"reportdate, projectcode, discipline, subcontractor, category, cwa, cwp, iwp, " \
               f"sum(case when level1 = 'Daily Quantity' then amount else 0 end) as qnt, " \
               f"sum(case when level2 = 'Direct' then amount else 0 end) as man  " \
               f"from job_plnt_data " \
               f"where reportdate >= '{f_date}' and reportdate <= '{t_date}' and iwp != 'NaN' " \
               f"group by reportdate, projectcode, discipline, subcontractor, category, cwa, cwp, iwp" \
               f") " \
               f"select *, case when qnt >0 and man>0 then qnt/man else 0 end as prd  from T " \
               f"order by projectcode asc, reportdate desc; "
        logWrite(f'[▶ Query          ] : {sSql}')
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['reportdate', 'projectCode', 'discipline', 'subcontractor', 'category', 'cwa', 'cwp', 'iwp', 'QNT', 'MAN', 'PRD']
        df = pd.DataFrame(data, columns=column_names)
        df = df.astype({
            # 'reportdate',
            'projectCode':str, 'discipline':str, 'subcontractor':str, 'category':str, 'cwa':str, 'cwp':str, 'iwp':str
        })
        df['QNT'] = df['QNT'].astype(float).round(2)
        df['MAN'] = df['MAN'].astype(int)
        df['PRD'] = df['PRD'].astype(float).round(2)
        df.replace('NaN', '', inplace=True)
        return df

    # def request_table_summary_sheet08(self, siteCode=None, f_date=None, t_date=None):
    #     """
    #     productivity accumulated
    #     """
    #     if siteCode == "PLNT":
    #         pQuery_siteCode = ""
    #     else:
    #         pQuery_siteCode = f"and projectcode = '{siteCode}' "
    #     if f_date is None:
    #         f_date = F_Date
    #     if t_date is None:
    #         t_date = T_Date
    #
    #     curs = self.conn.cursor()
    #     sSql = f"with T as (" \
    #            f"select " \
    #            f"reportdate, projectcode, discipline, subcontractor, category, cwa, cwp, iwp, " \
    #            f"sum(case when level1 = 'Daily Quantity' then amount else 0 end) as qnt, " \
    #            f"sum(case when level2 = 'Direct' then amount else 0 end) as man  " \
    #            f"from job_plnt_data " \
    #            f"where reportdate >= '{f_date}' and reportdate <= '{t_date}' and iwp != 'NaN' " \
    #            f"group by reportdate, projectcode, discipline, subcontractor, category, cwa, cwp, iwp" \
    #            f") " \
    #            f"select reportdate, projectcode, discipline, subcontractor, category, cwa, cwp, iwp, " \
    #            f"sum(man) over(partition by projectcode, discipline, subcontractor, category, cwa, cwp, iwp order by reportdate) as man_cum, " \
    #            f"sum(qnt) over(partition by projectcode, discipline, subcontractor, category, cwa, cwp, iwp order by reportdate) as qnt_cum " \
    #            f"from T " \
    #            f"order by projectcode asc, reportdate desc; "
    #     logWrite(f'[▶ Query          ] : {sSql}')
    #     curs.execute(sSql)
    #     data = curs.fetchall()
    #     column_names = ['reportdate', 'projectCode', 'discipline', 'subcontractor', 'category', 'cwa', 'cwp', 'iwp', 'MAN_cum', 'QNT_cum' ]
    #     df = pd.DataFrame(data, columns=column_names)
    #     df['PRD_cum'] = df.apply(lambda x: x['QNT_cum'] / x['MAN_cum'] if x['MAN_cum'] != 0 else 0, axis=1)
    #     df = df.astype({
    #         # 'reportdate',
    #         'projectCode':str, 'discipline':str, 'subcontractor':str, 'category':str, 'cwa':str, 'cwp':str, 'iwp':str
    #     })
    #     df['QNT_cum'] = df['QNT_cum'].astype(float).round(2)
    #     df['MAN_cum'] = df['MAN_cum'].astype(int)
    #     df['PRD_cum'] = df['PRD_cum'].astype(float).round(2)
    #     df.replace('NaN', '', inplace=True)
    #     return df


    def delete_old_data(self, dbTable, param=None):
        curs = self.conn.cursor()
        sSql = f"delete from {dbTable} {param};"
        try:
            curs.execute(sSql)
        except Exception as ex:
            print(ex, sSql)
            self.conn.rollback()
            return ex
        return True

    def insert_data_to_db(self, df, dbTable):
        curs = self.conn.cursor()
        sColumnName = ','.join(df.columns.tolist())
        for index, row in df.iterrows():
            sSql = f"insert into {dbTable}({sColumnName}) values({'%s,' * (len(row) - 1)}%s)"
            try:
                values = list(row)
                curs.execute(sSql, values)
            except Exception as ex:
                print(ex, sSql)
                self.conn.rollback()
                return ex
        return True

    def request_ilbo_md_by_site(self, siteCode, month):
        curs = self.conn.cursor()
        sSql = f"select 업체, sum(인원) from " \
               f" (select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"   from job_data  " \
               f"   where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"         and 직종 <> '소장(협력사)'  and 직종 <> '직원(협력사)' and 직종 <> '직원'" \
               f"   union all " \
               f"       select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"           from job_data_hpms  " \
               f"           where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"                and 직종 <> '소장(협력사)'  and 직종 <> '직원(협력사)' and 직종 <> '직원'" \
               f") a " \
               f" group by 업체;"
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ["업체", "근로자수"]
        df = pd.DataFrame(data, columns=column_names)

        sSql = f"select 업체, sum(인원) from " \
               f" (select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"   from job_data  " \
               f"   where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"         and 직종 = '소장(협력사)' " \
               f"   union all " \
               f"       select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"           from job_data_hpms  " \
               f"           where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"                and 직종 = '소장(협력사)' " \
               f") a " \
               f" group by 업체;"
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ["업체", "소장"]
        df1 = pd.DataFrame(data, columns=column_names)

        sSql = f"select 업체, sum(인원) from " \
               f" (select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"   from job_data  " \
               f"   where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"         and 직종 in ('직원(협력사)', '직원') " \
               f"   union all " \
               f"       select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"           from job_data_hpms  " \
               f"           where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"                and 직종 in ('직원(협력사)', '직원') " \
               f") a " \
               f" group by 업체;"
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ["업체", "직원"]
        df2 = pd.DataFrame(data, columns=column_names)

        df = pd.merge(df, df1, how='left', on='업체')
        df = pd.merge(df, df2, how='left', on='업체')
        df['현장코드'] = siteCode
        df = df.rename(columns={'업체': '업체명'})
        df = df[['현장코드', '업체명', '근로자수', '소장', '직원']]

        return df

if __name__ == '__main__':
    dc = DataControl()
    siteCode = "J731"
    month = "2022-05"
    df = dc.request_ilbo_md_by_site(siteCode, month)
    outputFileName = r"D:\Project_Python\webMDChecker\MDChecker\data\220701\data_J731_2.xlsx"
    with pd.ExcelWriter(outputFileName) as writer:
        if len(df) > 0:
            df.to_excel(writer, sheet_name="data")