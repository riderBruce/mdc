from sqlalchemy import create_engine
import psycopg2 as pg2
import pandas as pd
import numpy as np
import psutil
import os
import shutil
from pathlib import Path

from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

# root directory
rootPath = r'D:\Project_Data\webMDChecker'
logFile = f"{rootPath}\Log\Log_{datetime.now().strftime('%Y-%m-%d')}_MD.log"
savePath = f"{rootPath}\Files_MD\{datetime.now().strftime('%Y-%m')}"   # 첨부파일 저장위치
resultPath = f"{rootPath}\Result_"

# 상위폴더까지 생성 / 폴더 존재시 에러 없음
os.makedirs(f"{rootPath}\Log", exist_ok=True)
os.makedirs(savePath, exist_ok=True)

# set run time
sRunTime = datetime.now().strftime('%Y-%m-%d_%H%M')
T_Date = datetime.now().strftime('%Y-%m-%d')                         # Today
D1_Day = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')   # D-1 날짜
D2_Day = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')   # D-2 날짜
D3_Day = (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d')   # D-3 날짜
if int(T_Date[8:10]) < 10:
    F_Date = (datetime.now() - timedelta(days=10)).strftime('%Y-%m') + '-01'  # 집계기간 From / 월초(매달 10일 이전)
else:
    F_Date = datetime.now().strftime('%Y-%m') + '-01'  # 집계기간 From / 월중~월말


def logWrite(logStr):
    print(logStr)
    f = open(logFile, 'a', encoding='UTF-8')
    f.write(datetime.now().strftime('%Y-%m-%d %H%M%S') + " : " + logStr + "\n")
    f.close()

def kill_excel():
    for proc in psutil.process_iter():
        if proc.name() == "EXCEL.EXE":
            proc.kill()

class DataControl:
    def __init__(self, sArgv):
        self.sRunType = sArgv
        # DB 서버 정보 ###########################
        if self.sRunType == 'SERVER':
            self.db_host = '10.171.94.66'
            self.db_name = 'JobReport'
            self.db_user = 'postgres'
            self.db_pwd = 'nam1004'
        else:
            self.db_host = 'localhost'
            self.db_name = 'JobReport'
            self.db_user = 'postgres'
            self.db_pwd = 'nam1004'

        self.connStr = f'postgresql://{self.db_user}:{self.db_pwd}@{self.db_host}:5432/{self.db_name}'

        conn = pg2.connect(
            'host={0} dbname={1} user={2} password={3}'.format(self.db_host, self.db_name, self.db_user,
                                                               self.db_pwd))
        self.conn = conn


    def call_df_from_db_with_column_name(self, db_table_name):
        # get DB data
        curs = self.conn.cursor()
        sSql = f"select * from {db_table_name};"  # order by col_01 desc
        curs.execute(sSql)
        data_all = curs.fetchall()

        # get DB name
        sSql = f"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{db_table_name}' order by ordinal_position;"
        curs.execute(sSql)
        column_names = curs.fetchall()

        # 가져온 컬럼명은 (이름,  ) 이런 형태이므로 첫번째 컬럼만 별도로 리스트
        column_names = [i[0] for i in column_names]
        df = pd.DataFrame(data_all, columns=column_names)

        return df

    def get_column_names(self, db_table_name):
        curs = self.conn.cursor()
        # get DB name
        sSql = f"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{db_table_name}' order by ordinal_position;"
        curs.execute(sSql)
        column_names = curs.fetchall()
        # 가져온 컬럼명은 (이름,  ) 이런 형태이므로 첫번째 컬럼만 별도로 리스트
        column_names = [i[0] for i in column_names]
        return column_names

    def upload_df_to_db_at_once(self, df, db_table_name):
        engine = create_engine(self.connStr)
        df.to_sql(db_table_name, engine, if_exists='append')

    def is_oldmail(self, mailStr):
        curs = self.conn.cursor()
        sSql = f"select count(*) from mdc_mails " \
               f"   where mail = '{mailStr}' " \
               f"   and 처리현황 <> '담당자확인중★';"
               # f"   and (처리현황 <> '담당자확인중★' or 처리현황 is null);"
        curs.execute(sSql)
        nCnt = curs.fetchone()
        return nCnt[0]

    def insert_mail_get_list(self, mailStr, sendDate, senderTxt, subject, save_date, filename=None):
        curs = self.conn.cursor()
        sSql = f"insert into " \
               f"   mdc_mails " \
               f"   (mail, send_date, sender, subject, save_date, attachment) " \
               f"   values" \
               f"   ('{mailStr}','{sendDate}','{senderTxt}','{subject}', '{save_date}', '{filename}');"
        curs.execute(sSql)

    def drop_duplicates_by_date_from_raw(self, fileName, sendDate):
        curs = self.conn.cursor()
        sSql = f"delete from mdc_raw_md where attachment = '{fileName}' and send_date like '{sendDate[:7]}%';"
        curs.execute(sSql)

    def update_mails_sheetName(self, fileName_stem, sheetName, sendDate):
        curs = self.conn.cursor()
        sSql = f"update mdc_mails set " \
               f"   sheet_name = '{sheetName}' " \
               f"   where attachment = '{fileName_stem}' and send_date like '{sendDate[:7]}%';"
        curs.execute(sSql)

    def update_mails_process_status(self, fileName_stem, sendDate, senderTxt, text):
        curs = self.conn.cursor()
        sSql = f"update mdc_mails set " \
               f"   처리현황 = '{text}', 처리일 = '{datetime.now().strftime('%Y-%m-%d %H:%M:%S %z')}'  " \
               f"   where attachment = '{fileName_stem}' and send_date = '{sendDate}' and sender = '{senderTxt}';"
        curs.execute(sSql)

    def update_mails_process_status_by_mailStr(self, mailStr, sendDate, senderTxt, save_date, text):
        curs = self.conn.cursor()
        sSql = f"update mdc_mails set " \
               f"   처리현황 = '{text}', 처리일 = '{datetime.now().strftime('%Y-%m-%d %H:%M:%S %z')}'  " \
               f"   where mail = '{mailStr}' and send_date = '{sendDate}' and sender = '{senderTxt}' and save_date = '{save_date}';"
        curs.execute(sSql)

    def update_mails_process_status_by_siteCode(self, site_code, send_date, text):
        curs = self.conn.cursor()
        sSql = f"update mdc_mails set " \
               f"   처리현황 = '{text}', 처리일 = '{datetime.now().strftime('%Y-%m-%d %H:%M:%S %z')}' " \
               f"   where 현장코드 = '{site_code}' and send_date = '{send_date}';"
        curs.execute(sSql)

    def update_mails_add_site_code(self, fileName_stem, sendDate, senderTxt):
        # 퇴직공제부금 첨부파일에 있는 현장명 -> 매칭테이블 -> 현장코드 -> 첨부파일명 -> 이메일테이블의 첨부파일명 -> 현장코드 등록
        # 즉 매칭테이블에 없으면 연결이 안됨
        curs = self.conn.cursor()
        sSql = f"update mdc_mails set 현장코드 = d.현장코드 " \
               f"   from (select distinct c.attachment, a.현장코드 " \
               f"           from mdc_result a, mdc_raw_md b, mdc_mails c " \
               f"           where a.현장명p = b.현장명p and b.attachment = c.attachment " \
               f"                 and a.현장코드 <> '코드누락') as d " \
               f"   where mdc_mails.attachment = d.attachment and mdc_mails.현장코드 is null " \
               f"       and mdc_mails.attachment = '{fileName_stem}' and send_date = '{sendDate}' and sender = '{senderTxt}';"
        curs.execute(sSql)

    def update_mails_add_site_code_false(self, fileName_stem, sendDate):
        curs = self.conn.cursor()
        sSql = f"update mdc_mails set " \
               f"   현장코드 = 'False' " \
               f"   where attachment = '{fileName_stem}' and send_date like '{sendDate[:7]}%';"
        curs.execute(sSql)

    def update_attachment_list(self, projectCode, subcontractor, discipline, reportDate, sRunTime,row_File):
        curs = self.conn.cursor()
        sSql = f"update job_attach set 현장코드 = '{projectCode}', 업체 = '{subcontractor} / {discipline}', 날짜 = '{reportDate}', 집계일시 = '{sRunTime}' " \
               f"where 첨부파일 = '{row_File}'"
        curs.execute(sSql)

    def delete_not_attached_list(self):
        curs = self.conn.cursor()
        sSql = f"delete from job_attach where 날짜 is null;"
        curs.execute(sSql)

    def upload_ilbo_df_to_DB(self, df, projectCode, reportDate, subcontractor, discipline, dbTable):
        curs = self.conn.cursor()
        # delete old data
        sSql = f"delete from {dbTable} where reportdate='{reportDate}' and subcontractor='{subcontractor}' and projectcode='{projectCode}' and discipline = '{discipline}';"
        try:
            curs.execute(sSql)
        except Exception as ex:
            print(ex, sSql)
        # upload to DB
        sColumnName = ','.join(df.columns.tolist())
        for index, row in df.iterrows():
            sSql = f"insert into {dbTable}({sColumnName}) values({'%s,' * (len(row) - 1)}%s)"
            try:
                curs.execute(sSql, list(row))
            except Exception as ex:
                print(ex, sSql)
                return
        logWrite(f'[▶ finish         ] : 작업일보 DB 업로드 완료, {projectCode}, {reportDate}, {subcontractor}, {discipline}')
        return

    def request_table_in_mail_body(self, siteCode):
        if siteCode == "PLNT":
            pQuery_siteCode = "and 현장코드 in (select distinct(projectcode) from job_plnt_data) "
        else:
            pQuery_siteCode = f"and 현장코드 = '{siteCode}' "
        curs = self.conn.cursor()
        sSql = f"select 현장코드, 업체, 발송자, 날짜, 발송일시, 집계일시  " \
               f"from job_attach " \
               f"where 발송일시 >= '{D3_Day}' {pQuery_siteCode} " \
               f"order by cast(집계일시 as date) desc, 현장코드; "
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ['현장코드', '업체', '발송자', '날짜', '발송일시', '집계일시']
        df = pd.DataFrame(data, columns=column_names)
        try:
            summary_time = datetime.strptime(D1_Day + ' 05:00:00 +0900', '%Y-%m-%d %H:%M:%S %z')
            df = df[df['발송일시'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S %z') >= summary_time)]
            logWrite(f"{summary_time} 이후에 수신된 메일만 첨부에 넣습니다.")
        except:
            pass
        return df

    def request_local_timezone(self, siteCode):
        curs = self.conn.cursor()
        sSql = f"select 타임존 from job_mst_site where 현장코드 = '{siteCode}'"
        curs.execute(sSql)
        timezone = curs.fetchall()
        return timezone[0][0]

    def delete_old_data(self, dbTable, param=None):
        curs = self.conn.cursor()
        sSql = f"delete from {dbTable} {param};"
        try:
            curs.execute(sSql)
        except Exception as ex:
            print(ex, sSql)
            self.conn.rollback()
            return ex
        return True

    def insert_data_to_db(self, df, dbTable):
        curs = self.conn.cursor()
        sColumnName = ','.join(df.columns.tolist())
        for index, row in df.iterrows():
            sSql = f"insert into {dbTable}({sColumnName}) values({'%s,' * (len(row) - 1)}%s)"
            try:
                values = list(row)
                curs.execute(sSql, values)
            except Exception as ex:
                print(ex, sSql)
                self.conn.rollback()
                return ex
        return True

    def request_ilbo_md_by_site(self, siteCode, month):
        curs = self.conn.cursor()
        # 전체 출역수
        sSql = f"select 업체, sum(인원) from " \
               f" (select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"   from job_data  " \
               f"   where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"         and 직종 <> '소장(협력사)'  and 직종 <> '직원(협력사)' and 직종 <> '직원'" \
               f"   union all " \
               f"       select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"           from job_data_hpms  " \
               f"           where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"                and 직종 <> '소장(협력사)'  and 직종 <> '직원(협력사)' and 직종 <> '직원'" \
               f") a " \
               f" group by 업체;"
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ["업체", "근로자수"]
        df = pd.DataFrame(data, columns=column_names)

        # 소장 출역수
        sSql = f"select 업체, sum(인원) from " \
               f" (select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"   from job_data  " \
               f"   where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"         and 직종 = '소장(협력사)' " \
               f"   union all " \
               f"       select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"           from job_data_hpms  " \
               f"           where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"                and 직종 = '소장(협력사)' " \
               f") a " \
               f" group by 업체;"
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ["업체", "소장"]
        df1 = pd.DataFrame(data, columns=column_names)

        # 직원 출역수
        sSql = f"select 업체, sum(인원) from " \
               f" (select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"   from job_data  " \
               f"   where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"         and 직종 in ('직원(협력사)', '직원') " \
               f"   union all " \
               f"       select 현장코드, 현장명, 업체, 날짜, 대공종, 공종, 직종, 인원  " \
               f"           from job_data_hpms  " \
               f"           where 현장코드 = '{siteCode}' and 날짜 like '{month}%' and 인원 <> 0 " \
               f"                and 직종 in ('직원(협력사)', '직원') " \
               f") a " \
               f" group by 업체;"
        curs.execute(sSql)
        data = curs.fetchall()
        column_names = ["업체", "직원"]
        df2 = pd.DataFrame(data, columns=column_names)

        df = pd.merge(df, df1, how='left', on='업체')
        df = pd.merge(df, df2, how='left', on='업체')
        df['현장코드'] = siteCode
        df = df.rename(columns={'업체': '업체명'})
        df = df[['현장코드', '업체명', '근로자수', '소장', '직원']]
        return df

    def request_table_result_by_site(self, site_code, month):
        curs = self.conn.cursor()
        sSql = f"select 현장명p, 업체명, 출역일수, 소장출역, 직원출역, 확정일수 " \
               f"   from mdc_result " \
               f"   where 현장코드 = '{site_code}' and 분석월 = '{month}';"
        curs.execute(sSql)
        data = curs.fetchall()
        columns = ['현장명p', '업체명', '출역일수', '소장출역', '직원출역', '확정일수']
        df = pd.DataFrame(data, columns=columns)
        return df

    def request_site_name_by_site_code(self, site_code):
        curs = self.conn.cursor()
        sSql = f"select  distinct col_04 from prd_rawdata_md where col_03 = '{site_code}';"
        curs.execute(sSql)
        data = curs.fetchone()
        if data is None:
            site_name = "미등록 현장명"
        else:
            site_name = data[0]
        return site_name

    def request_pension_data(self, attachment):
        curs = self.conn.cursor()
        sSql = f"select 현장명p, 업체명p, 공제가입번호, 수정일, sum(확정일수), sum(인원수), sheet_name, attachment, send_date " \
               f"   from mdc_raw_md " \
               f"   where attachment = '{attachment}'" \
               f"   group by 현장명p, 업체명p, 공제가입번호, 수정일, sheet_name, attachment, send_date;"
        curs.execute(sSql)
        data = curs.fetchall()
        columns = ['현장명p', '업체명p', '공제가입번호', '수정일', '확정일수', '인원수', 'sheet_name', 'attachment', 'send_date']
        df = pd.DataFrame(data, columns=columns)
        return df

    def request_address_mailto(self, site_code):
        curs = self.conn.cursor()
        sSql = f"select 메일주소 from mdc_address where 현장코드 = '{site_code}';"
        curs.execute(sSql)
        data = curs.fetchall()
        add_list = list(dict.fromkeys([i[0] for i in data]))
        mailtoList = ', '.join(add_list)
        # logWrite(f"request address for site --- 현장코드 : {site_code}, 담당자수 : {len(data)}, 메일주소 : {mailtoList}")
        return mailtoList


    def request_address_cc(self):
        curs = self.conn.cursor()
        sSql = f"select 메일주소 from mdc_address where 부서 = 'RM';"
        curs.execute(sSql)
        data = curs.fetchall()
        add_list = list(dict.fromkeys([i[0] for i in data]))
        mailtoList = ', '.join(add_list)
        # logWrite(f"request address cc --- 담당자수 : {len(data)}, 메일주소 : {mailtoList}")
        return mailtoList


if __name__ == '__main__':
    dc = DataControl()
    siteCode = "J731"
    month = "2022-05"
    df = dc.request_ilbo_md_by_site(siteCode, month)
    outputFileName = r"D:\Project_Python\webMDChecker\MDChecker\data\220701\data_J731_2.xlsx"
    with pd.ExcelWriter(outputFileName) as writer:
        if len(df) > 0:
            df.to_excel(writer, sheet_name="data")