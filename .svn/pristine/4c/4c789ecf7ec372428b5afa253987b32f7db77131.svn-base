import numpy as np
import win32com.client
import re
import os

from model_data import *

class ExcelDataConverter:
    def __init__(self, fileName):
        self.fileName = fileName

    def is_excel_file(self):
        filename_tmp, file_extension = os.path.splitext(self.fileName)
        if file_extension in [".xlsx", ".xls"]:
            return True
        else:
            logWrite('[▷ fail           ] : 엑셀파일이 아닙니다. ' + self.fileName)
            return False

    def read_excel_usedRangeData(self, sheetNum):
        excel = win32com.client.dynamic.Dispatch('Excel.Application')
        excel.Visible = False
        # excel.ScreenUpdating = False
        # excel.AskToUpdateLinks = False
        excel.DisplayAlerts = False

        wb = excel.Workbooks.Open(self.fileName)
        # sheetName = "sheet1"
        # sheet = wb.Sheets(sheetName)
        try:
            sheet = wb.Sheets(sheetNum)
        except Exception as ex:
            logWrite(f'{sheetNum} : 해당 시트가 없습니다. {ex}')
            return False
        # get all data from excel used range
        sheetName = sheet.Name
        usedRangeData = sheet.UsedRange()
        # close excel without save
        wb.Close(False)
        excel.quit()

        return sheetName, usedRangeData

    def is_pension_file(self, usedRangeData):
        if usedRangeData[0][0] == "No." and usedRangeData[0][1] == "신고상태":
            return True
        else:
            logWrite('[▷ fail           ] : 퇴직공제부금 파일이 아닙니다. ' + self.fileName)
            return False

    def convert_pension_data_for_DB(self, sheetName, usedRangeData):
        filename = self.fileName
        # get Table range
        usedRangeTable = usedRangeData
        # get Table head and body
        usedRangeTableHead = usedRangeTable[:2]
        usedRangeTableBody = usedRangeTable[2:]
        # columnNames
        columnNames = [""] * len(usedRangeTableHead[0])
        for row in usedRangeTableHead:
            for i, val in enumerate(row):
                if val is None:
                    val = ""
                columnNames[i] += str(val)

        df = pd.DataFrame(usedRangeTableBody, columns=columnNames)
        columns = ['No.', '공제가입번호', '계약명', '소속', '성명', '확정일수', '수정일']
        df = df[columns]
        df = df.groupby(['공제가입번호', '계약명', '소속', '수정일']).agg(
            {'확정일수': 'sum', '성명': 'count'}
        )
        df = df.reset_index()
        df['수정일'] = df['수정일'].apply(lambda x: str(x)[:8])
        df['계약명'] = df['계약명'].apply(lambda x: str(x).strip())
        df['sheet_name'] = sheetName
        df['첨부파일'] = filename
        df = df.rename(columns={
            '계약명': '현장명p',
            '소속': '업체명p',
            '공제가입번호': '공제가입번호',
            '수정일': '수정일',
            '확정일수': '확정일수',
            '성명': '인원수',
            'sheet_name': 'sheet_name',
            '첨부파일': '첨부파일'
        })

        return df


    def convert_actual_quantity_data_in_steel_structure(self, usedRangeData, df_master):
        # get Table range
        usedRangeTable = usedRangeData
        # get Table head and body
        usedRangeTableHead = list(usedRangeTable[0])
        usedRangeTableBody = usedRangeTable[1:]
        df = pd.DataFrame(usedRangeTableBody, dtype='object', columns=usedRangeTableHead)
        # df.columns = usedRangeTableHead
        # select columns
        df = df[['Item Type', 'Unit\nWeight', 'Qty.', 'Installation\nDate', 'IWP No.']]
        df = df.rename(columns={'Item Type': 'itemtype', 'Unit\nWeight': 'unitweight', 'Qty.': 'qty', 'Installation\nDate': 'installationdate', 'IWP No.': 'iwp'})
        df = df[df['installationdate'] != '']
        df['installationdate'] = df['installationdate'].apply(lambda x: str(x)[:10] if len(str(x)) >= 10 else '')
        df = df.astype({
            'itemtype': str,
            'unitweight': float,
            'qty': float,
            'installationdate': str,
            'iwp': str
        })
        # manipulate data
        df['sum'] = df['unitweight'] * df['qty']
        # df['category'] = df.apply(lambda x: x['iwp'])
        df = df[['installationdate', 'iwp', 'itemtype', 'sum']]
        df = df.groupby(by=['installationdate', 'iwp', 'itemtype'], dropna=True, as_index=True, axis='index').sum()
        df = df.reset_index()
        df = pd.merge(df, df_master, how='left', on='iwp')
        df['itemtype'] = df['itemtype'].str.strip()
        df['category'] = df.apply(lambda x: x['category'] if x['itemtype'] in ['BEAM', 'COLUMN', 'GIRDER', 'HBRACE', 'VBRACE'] else 'MiscWork_HR_LD_GR_STR', axis=1)
        return df

    def convert_master_list_in_steel_structure(self, masterList):
        columnNames = list(masterList[0])
        data = masterList[1:]
        df = pd.DataFrame(data, columns=columnNames)
        df = df[['IWP', 'Structure Category']]
        df = df.rename(columns={'IWP': 'iwp', 'Structure Category': 'category'})
        df = df[~df['iwp'].isna()]
        df = df.astype({
            'iwp': 'category',
            'category': 'category',
        })
        return df

    def convert_actual_quantity_data_in_piping(self, usedRangeData, df_master):
        # get Table range
        usedRangeTable = usedRangeData
        # get Table head and body
        # usedRangeTableHead = list(usedRangeTable[2])
        usedRangeTableBody = usedRangeTable[3:]
        df = pd.DataFrame(usedRangeTableBody, dtype='object')

        # select data
        df = df[[0, 6, 9, 12, 13, 39, 42, 126]]
        df = df.rename(columns={
            0: 'iwp',
            6: 'iso',
            9: 'joint',
            12: 's_f',
            13: 'size',
            39: 'date',
            42: 'result',
            126: 'cut_out_join',
        })
        df = df.astype({
            'size': float,
            'date': str,
        })

        # 데이터 전처리
        df = df[df['iwp'] != '']
        df = df[~df['iwp'].isna()]

        # 조건 1-1 : 숫자로 시작하는 데이터만
        df = df[df['joint'].str[0].str.isdigit()]

        # 조건 2: result == accept and cut_out_joint == false
        # df = df[(df['result'] == 'Accept') & (df['cut_out_join'] == 'FALSE')]

        df = pd.merge(df, df_master, how='left', on='iwp')

        # iwp가 마스터리스트에 없는 경우 해당 데이터 삭제 -> 확인필요
        df = df[~df['field_piping_type'].isna()]

        # manipulate data
        df['category'] = df.apply(lambda x:
                                  self.category_dic[0] if (x['s_f'] == 'S') and (x['field_piping_type'] in ('AGPIPING_PIPERACKSLEEPER[ID]', 'AGPIPING_AROUNDEQUIPMENT[ID]')) else
                                  self.category_dic[3] if (x['s_f'] == 'S') and (x['field_piping_type'] in ('UGPIPING_FIELD[ID]')) else
                                  x['field_piping_type'],
                                  axis=1
                                  )

        df = df.astype({
            'size': float,
            'date': str,
        })

        # manipulate data
        df = df[['category', 'iwp', 'iso', 'joint', 'date', 'size']]
        df = df.groupby(by=['category', 'iwp', 'iso', 'joint', 'date'], dropna=True, as_index=True, axis='index').sum()
        df = df.reset_index()

        # # 조건 1-2 : joint 컬럼에 'RW'가 포함된 데이터는 기존 데이터를 대체하는 데이터임
        df['temp'] = df['iso'] + df['joint']
        rw_list = df.loc[df['temp'].str.endswith('RW', na=False), 'temp'].tolist()
        rw_list = list(dict.fromkeys(rw_list))
        rw_list = [i.replace('RW', '') for i in rw_list]
        df = df[~df['joint'].isin(rw_list)]

        # 컬럼 정리
        df = df[['category', 'iwp', 'iso', 'joint', 'date', 'size']]

        return df


    def convert_master_list_in_piping(self, masterList):
        columnNames = list(masterList[0])
        data = masterList[1:]
        df = pd.DataFrame(data, columns=columnNames)
        df = df[['IWP', 'CWA', 'CWP']]
        df = df.rename(columns={'IWP': 'iwp', 'CWA': 'cwa', 'CWP': 'cwp'})
        df = df[~df['iwp'].isna()]
        self.category_dic = {
            0: 'SHOP_FABRICATION[ID]',
            1: 'AGPIPING_PIPERACKSLEEPER[ID]',
            2: 'AGPIPING_AROUNDEQUIPMENT[ID]',
            3: 'UGPIPING_SHOP[ID]',
            4: 'UGPIPING_FIELD[ID]'
        }
        df['field_piping_type'] = df['cwp'].apply(lambda x:
                                                  self.category_dic[4] if str(x)[-3:-2] == 'U' else
                                                  self.category_dic[1] if str(x)[-1] == 'P' else
                                                  self.category_dic[2])
        df = df.astype({
            'iwp': 'category',
            'cwa': 'category',
            'cwp': 'category',
            'field_piping_type': 'category',
        })
        return df




if __name__ == "__main__":
    # Test Module ----------- ilbo file
    fileName = r"D:\Project_Python\webMDChecker\MDChecker\data\220704\테스트.xls"

    excelDataConverter = ExcelDataConverter(fileName)
    sheetName, usedRangeData = excelDataConverter.read_excel_usedRangeData(1)
    # a = excelDataConverter.is_pension_file(usedRangeData)
    df = excelDataConverter.convert_pension_data_for_DB(sheetName, usedRangeData)
    dc = DataControl()
    dc.insert_data_to_db(df, 'mdc_raw_md')
    dc.conn.commit()
    # df_mst_site = dc.call_df_from_db_with_column_name('mdc_mst_site')
    # df = pd.merge(df, df_mst_site, how='left', on='현장명p')
    # siteCode = df.현장코드.unique()[0]
    # df = df
    # outputFileName = r"D:\Project_Data\JobReport\Files_PLNT\data111.xlsx"
    # with pd.ExcelWriter(outputFileName) as writer:
    #     if len(df) > 0:
    #         df.to_excel(writer, sheet_name="data")



