import sys
import time
from tqdm.auto import tqdm

sys.path.append(r"D:\Project_Python\webMDChecker\MDChecker\MailControler")

from model_mail_get import EmailAttachDownloader
from model_excel_export import SummaryExcelData
from model_excel_import import ExcelDataConverter
from model_data import *
from model_data_converter import PensionDataConverter
from model_excel_styler import ExcelFormMaker
from model_mail_styler import MailFormMaker
from model_mail_send import MailSender

# ----------------------------------------
# sArgv = "SERVER"
sArgv = ""
if len(sys.argv) > 1:
    sArgv = sys.argv[1]
# sys.argv[0] : file name / sys.argv[1] : command line argument
# ----------------------------------------
logWrite('────────────────────── ★ Run  Start ★ ───────────────────────')
startTime = datetime.now()
logWrite(f'start : {startTime}')
# close all opened excel
kill_excel()
# db controller
dc = DataControl(sArgv)

# dc.delete_old_data('mdc_mails')
# dc.delete_old_data('mdc_mails', "where mail = '2022-07-11 10:52:13 | eca | 임시 현장명';")
# dc.delete_old_data('mdc_mails', "where mail = '2022-07-06 | 김영일 | 5월 자료';")
# dc.delete_old_data('mdc_raw_md')
# dc.delete_old_data('mdc_result')

# # email check
ed = EmailAttachDownloader(dc)
email_num = ed.check_emails()
# delete old attachment / attached file download / write result in DB
mail_info = ed.download_attachFiles(email_num)

if len(mail_info) == 0:
    logWrite(f'[신규 메일 없음      ] : 신규 메일이 없으므로 프로세스를 종료됩니다. ')

for fileName, send_date, senderTxt, subject in tqdm(mail_info, position=0, leave=True):
    fileName_stem = Path(fileName).stem

    # file data save into db
    ec = ExcelDataConverter(fileName)
    if not ec.is_excel_file():
        dc.update_mails_add_site_code_false(fileName_stem, send_date)
        dc.update_mails_process_status(fileName_stem, send_date, senderTxt, "첨부파일오류")
        dc.conn.commit()
        continue
    sheetName, usedRangeData = ec.read_excel_usedRangeData(1)
    if not ec.is_pension_file(usedRangeData):
        dc.update_mails_add_site_code_false(fileName_stem, send_date)
        dc.update_mails_process_status(fileName_stem, send_date, senderTxt, "첨부파일오류")
        # logWrite(f"{fileName_stem}_{send_date} : 퇴직공제부금 다운로드 파일이 아닙니다.")
        dc.conn.commit()
        continue
    df = ec.convert_pension_data_for_DB(sheetName, send_date, usedRangeData)
    dc.drop_duplicates_by_date_from_raw(fileName_stem, send_date)
    dc.insert_data_to_db(df, 'mdc_raw_md')

    # update mdc_mails
    dc.update_mails_sheetName(fileName_stem, sheetName, send_date)
    # dc.update_mails_process_status(fileName_stem, send_date, senderTxt, "파일저장완료")
    logWrite(f'[데이터 저장 - Save ] : {fileName_stem} ')

    # data convert by fileName
    pc = PensionDataConverter(dc, fileName_stem)
    siteCode, month, df_converted = pc.pension_data_converter()

    # update_mails_table
    if siteCode:
        dc.update_mails_add_site_code(fileName_stem, send_date, senderTxt)
        # dc.update_mails_process_status(fileName_stem, send_date, senderTxt, "데이터추출완료")
        # dc.insert_new_mail_sender_address(siteCode, senderTxt)
        logWrite(f'[데이터 가공 - Save ] : {fileName_stem} ')
    else:
        dc.update_mails_add_site_code_false(fileName_stem, send_date)
        # dc.update_mails_process_status(fileName_stem, send_date, senderTxt, "미등록현장자료")
        logWrite(f"{fileName_stem}_{send_date} : 등록되지 않은 현장 자료입니다.")

    # reply : excel / styling / send mail
    if siteCode:
        se = SummaryExcelData(dc, siteCode, month)
        outputFileName = se.name_output_excel_file()
        se.consist_summary_excel_data(outputFileName)

        # form excel : merge, color, align – win32com.client
        ExcelFormMaker(outputFileName, siteCode, month)

        # make mailBody
        mf = MailFormMaker(dc, siteCode)
        sSubject = mf.write_subject()
        # htmlTable = mf.consist_table_in_mail_body()
        # sMailBody = mf.write_html_mail_body(htmlTable)
        sMailBody = mf.write_html_mail_body()

        if sArgv == 'SERVER':
            mailtoList = dc.request_address_mailto(siteCode)
            mailtoccList = dc.request_address_cc()
        else:
            mailtoList = 'kafka@hdec.co.kr'
            mailtoccList = 'kafka@hdec.co.kr'

        # send mail - smtp
        mailSender = MailSender(dc, siteCode)
        mailSender.send_mail_smtp(sSubject, sMailBody, mailtoList, mailtoccList, outputFileName)
        dc.update_mails_process_status_by_siteCode(siteCode, send_date, "메일송부완료")
        dc.update_mails_older_process_status_by_siteCode(fileName_stem, send_date, senderTxt, siteCode)
    else:
        # make mailBody
        mf = MailFormMaker(dc, siteCode)
        sSubject = mf.write_error_subject()
        un_matching_list = df.현장명p.to_list()
        bodyText = f"{send_date} : 해당 일시에 수신된 데이터를 매칭할 수 없습니다. 확인하시기 바랍니다. <br><br>" \
                   f"{un_matching_list}"
        sMailBody = mf.write_html_mail_body(bodyText)

        if sArgv == 'SERVER':
            mailtoList = dc.request_address_mailto(siteCode)
            mailtoccList = dc.request_address_cc()
        else:
            mailtoList = 'kafka@hdec.co.kr'
            mailtoccList = 'kafka@hdec.co.kr'

        # send mail - smtp
        mailSender = MailSender(dc, siteCode)
        mailSender.send_mail_smtp(sSubject, sMailBody, mailtoList, mailtoccList, fileName)
        dc.update_mails_process_status_by_siteCode(siteCode, send_date, "담당자확인중★")

    # 파일 1개 처리하여 메일 송부 후
    dc.conn.commit()

try:
    time.sleep(1)
    shutil.rmtree(savePath)
    logWrite(f'[첨부파일 - 전체삭제  ] : {savePath}')
except OSError as e:
    logWrite(f'[첨부파일 - 삭제오류  ] : {e.filename}, {e.strerror}')

logWrite(f'finish : {datetime.now() - startTime}')
logWrite('────────────────────── ★ Run Finish ★ ───────────────────────')



